{"ast":null,"code":"import _classCallCheck from\"C:/Users/mohcine/Desktop/project_pfe/wayz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/mohcine/Desktop/project_pfe/wayz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/mohcine/Desktop/project_pfe/wayz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/mohcine/Desktop/project_pfe/wayz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{withGoogleMap,GoogleMap,withScriptjs,InfoWindow,Marker}from\"react-google-maps\";import Geocode from\"react-geocode\";import{Descriptions}from'antd';import man from'./man.png';import Cardlist1 from'./CardCarLocation';import SearchMap from'./SearchMap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";Geocode.setApiKey(\"AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg\");Geocode.enableDebug();var LocationSearchModal=/*#__PURE__*/function(_React$Component){_inherits(LocationSearchModal,_React$Component);var _super=_createSuper(LocationSearchModal);function LocationSearchModal(){var _this;_classCallCheck(this,LocationSearchModal);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={typeV:'',typeR:'',isOpen:false,indexOpen:-1,address:'',city:'',area:'',state:'',zoom:15,height:400,mapPosition:{lat:0,lng:0},markerPosition:{lat:0,lng:0}};_this.onVchange=function(event){_this.setState({typeV:event.target.value});};_this.onRchange=function(event){_this.setState({typeR:event.target.value});console.log('typeR',_this.state.typeR);};_this.handleToggleOpen=function(index){_this.setState({isOpen:true,indexOpen:index});};_this.handleToggleClose=function(){_this.setState({isOpen:false});};_this.getCity=function(addressArray){var city='';for(var i=0;i<addressArray.length;i++){if(addressArray[i].types[0]&&'administrative_area_level_2'===addressArray[i].types[0]){city=addressArray[i].long_name;return city;}}};_this.getArea=function(addressArray){var area='';for(var i=0;i<addressArray.length;i++){if(addressArray[i].types[0]){for(var j=0;j<addressArray[i].types.length;j++){if('sublocality_level_1'===addressArray[i].types[j]||'locality'===addressArray[i].types[j]){area=addressArray[i].long_name;return area;}}}}};_this.getState=function(addressArray){var state='';for(var i=0;i<addressArray.length;i++){for(var _i=0;_i<addressArray.length;_i++){if(addressArray[_i].types[0]&&'administrative_area_level_1'===addressArray[_i].types[0]){state=addressArray[_i].long_name;return state;}}}};_this.onMarkerDragEnd=function(event){var newLat=event.latLng.lat(),newLng=event.latLng.lng();Geocode.fromLatLng(newLat,newLng).then(function(response){var address=response.results[0].formatted_address,addressArray=response.results[0].address_components,city=_this.getCity(addressArray),area=_this.getArea(addressArray),state=_this.getState(addressArray);_this.setState({address:address?address:'',area:area?area:'',city:city?city:'',state:state?state:'',markerPosition:{lat:newLat,lng:newLng},mapPosition:{lat:newLat,lng:newLng}});},function(error){console.error(error);});};_this.onPlaceSelected=function(place){console.log('plc',place);var address=place.formatted_address,addressArray=place.address_components,city=_this.getCity(addressArray),area=_this.getArea(addressArray),state=_this.getState(addressArray),latValue=place.geometry.location.lat(),lngValue=place.geometry.location.lng();console.log('latvalue',latValue);console.log('lngValue',lngValue);// Set these values in the state.\n_this.setState({address:address?address:'',area:area?area:'',city:city?city:'',state:state?state:'',markerPosition:{lat:latValue,lng:lngValue},mapPosition:{lat:latValue,lng:lngValue}});};return _this;}_createClass(LocationSearchModal,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;if(navigator.geolocation){navigator.geolocation.getCurrentPosition(function(position){_this2.setState({mapPosition:{lat:position.coords.latitude,lng:position.coords.longitude},markerPosition:{lat:position.coords.latitude,lng:position.coords.longitude}},function(){Geocode.fromLatLng(position.coords.latitude,position.coords.longitude).then(function(response){console.log(response);var address=response.results[0].formatted_address,addressArray=response.results[0].address_components,city=_this2.getCity(addressArray),area=_this2.getArea(addressArray),state=_this2.getState(addressArray);console.log('city',city,area,state);_this2.setState({address:address?address:'',area:area?area:'',city:city?city:'',state:state?state:''});},function(error){console.error(error);});});});}else{console.error(\"Geolocation is not supported by this browser!\");}}},{key:\"render\",value:// const AsyncMap = compose(\n//     withProps({\n//         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyALVjLwOIM1gf7EzdJJVmWLKdLP-yZGTcw&v=3.exp&libraries=geometry,drawing,places\",\n//         loadingElement: <div style={{ height: `100%` }} />,\n//         containerElement: <div style={{ height: `400px` }} />,\n//         mapElement: <div style={{ height: `100%` }} />,\n//     }),\n//     withScriptjs,\n//     withGoogleMap\n// )((props) =>\n//     <GoogleMap\nfunction render(){var _this3=this;var AsyncMap=withScriptjs(withGoogleMap(function(props){return/*#__PURE__*/_jsxs(GoogleMap,{defaultZoom:_this3.state.zoom,defaultCenter:{lat:_this3.state.mapPosition.lat,lng:_this3.state.mapPosition.lng},children:[/*#__PURE__*/_jsx(Marker,{google:_this3.props.google,name:'Dolores park',draggable:true,onDragEnd:_this3.onMarkerDragEnd,position:{lat:_this3.state.markerPosition.lat,lng:_this3.state.markerPosition.lng},icon:{url:man,scaledSize:new window.google.maps.Size(25,25)},onClick:function onClick(){return _this3.handleToggleOpen(-1);},children:_this3.state.isOpen&&-1===_this3.state.indexOpen&&/*#__PURE__*/_jsx(InfoWindow,{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"span\",{style:{padding:0,margin:0},children:_this3.state.address})})})},-1),/*#__PURE__*/_jsx(Cardlist1,{handleToggleOpen:_this3.handleToggleOpen,isOpen:_this3.state.isOpen,indexOpen:_this3.state.indexOpen,google:_this3.props.google,typeV:_this3.state.typeV,typeR:_this3.state.typeR})]});}));return/*#__PURE__*/_jsxs(\"div\",{className:\"tc\",style:{padding:'1rem',margin:'0 auto',maxWidth:1000},children:[/*#__PURE__*/_jsx(SearchMap,{onPlaceSelected:this.onPlaceSelected,onVchange:this.onVchange,onRchange:this.onRchange}),/*#__PURE__*/_jsx(AsyncMap,{googleMapURL:\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg&libraries=places\",loadingElement:/*#__PURE__*/_jsx(\"div\",{style:{height:\"100%\"}}),containerElement:/*#__PURE__*/_jsx(\"div\",{style:{height:this.state.height}}),mapElement:/*#__PURE__*/_jsx(\"div\",{style:{height:\"100%\"}})}),/*#__PURE__*/_jsxs(Descriptions,{bordered:true,children:[/*#__PURE__*/_jsx(Descriptions.Item,{label:\"City\",children:this.state.city}),/*#__PURE__*/_jsx(Descriptions.Item,{label:\"Area\",children:this.state.area}),/*#__PURE__*/_jsx(Descriptions.Item,{label:\"State\",children:this.state.state}),/*#__PURE__*/_jsx(Descriptions.Item,{label:\"Address\",children:this.state.address})]})]});}}]);return LocationSearchModal;}(React.Component);export default LocationSearchModal;/*import React, { Component } from \"react\";\r\nimport {\r\n  InfoWindow,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport { Descriptions} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport AutoComplete from 'react-google-autocomplete'\r\n\r\nGeocode.setApiKey(\"AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg\");\r\n\r\nclass Map extends Component {\r\n\r\n\r\n  constructor(){\r\n  super();\r\n   this.state={\r\n   address:\"\",\r\n   city:\"\",\r\n   area:\"\",\r\n   state:\"\",\r\n   zoom:15,\r\n   height:400,\r\n   mapPosition:{\r\n    lat:0,\r\n    lng:0,\r\n   },\r\n   markerPosition:{\r\n    lat:0,\r\n    lng:0,\r\n   }\r\n\r\n\r\n\r\n  }  }  \r\n\r\n componentDidMount(){\r\n\r\n\r\n\r\n   if(navigator.geolocation){\r\n  navigator.geolocation.getCurrentPosition(position =>{\r\n    console.log('position',position)\r\n      this.setState({\r\n         mapPosition:{\r\n             lat:position.coords.latitude,\r\n             lng:position.coords.longitude,\r\n          },\r\n         markerPosition:{\r\n             lat:position.coords.latitude,\r\n             lng:position.coords.longitude,\r\n         }\r\n      },()=>{\r\n        Geocode.fromLatLng(position.coords.latitude,position.coords.longitude)\r\n  .then(response=>{\r\n    console.log('response',response);\r\n\r\n    const address=response.results[0].formatted_address,\r\n          addressArray=response.results[0].address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray);\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n                \r\n          })\r\n  })\r\n      })\r\n  })\r\n\r\n   }\r\n }\r\n\r\n getCity=(addressArray)=>{\r\n  let city=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n     if(addressArray[i].types[0] && 'administrative_area_level_2'===addressArray[i].types[0]){\r\n      city=addressArray[i].long_name;\r\n      return city;\r\n     }\r\n\r\n  }\r\n \r\n\r\n }\r\n\r\n getArea=(addressArray)=>{\r\n  let area=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n     if(addressArray[i].types[0]){\r\n        for(let j=0;j<addressArray.length;j++){\r\n     if('sublocality_level_1'===addressArray[i].types[j] || 'locality'===addressArray[i].types[j] )\r\n           area=addressArray[i].long_name;\r\n         return area;\r\n        }\r\n\r\n      \r\n    \r\n     }\r\n\r\n  }\r\n\r\n\r\n }\r\n\r\n\r\n  getState=(addressArray)=>{\r\n  let state=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n  for(let i=0;i<addressArray.length;i++){\r\n    if(addressArray[i].types[0] && 'administrative_area_level_1'===addressArray[i].types[0]){\r\n      state=addressArray[i].long_name;\r\n      return state\r\n\r\n    }\r\n  }   \r\n\r\n     \r\n     }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n onMarkerDragEnd=(event)=>{\r\n\r\n  let newLat=event.latLng.lat();\r\n  let newLng=event.latLng.lng();\r\n\r\n  console.log('new lat',newLat,'newLng',newLng);\r\n\r\n  Geocode.fromLatLng(newLat,newLng)\r\n  .then(response=>{\r\n    console.log('response',response);\r\n\r\n    const address=response.results[0].formatted_address,\r\n          addressArray=response.results[0].address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray);\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n            mapPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            },\r\n            markerPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            }      \r\n          })\r\n  })\r\n\r\n  }\r\n\r\n\r\n   onPlaceSelected=(place)=>{\r\n     const address=place.formatted_address,\r\n          addressArray=place.address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray),\r\n          newLat=place.geometry.location.lat(),\r\n          newLng=place.geometry.location.lng();\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n            mapPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            },\r\n            markerPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            }      \r\n          })\r\n  }\r\n\r\n  render(){\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n  const MapWithAMarker = withScriptjs(withGoogleMap(props =>\r\n  <GoogleMap\r\n    defaultZoom={11}\r\n    defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n  >\r\n    <Marker\r\n      draggable={true}\r\n      onDragEnd={this.onMarkerDragEnd}\r\n      position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n    >\r\n<InfoWindow>\r\n  <p> Hello </p>\r\n\r\n</InfoWindow>\r\n\r\n\r\n    </Marker>\r\n\r\n    <AutoComplete\r\n    style={{width:\"100%\",height:'40px' ,paddingLeft:16,marginTop:2,marginBottom:'2rem'}}\r\n    types={ [\"(regions)\"]}\r\n     onPlaceSelected={this.onPlaceSelected}\r\n    />\r\n\r\n  </GoogleMap>\r\n));\r\n\r\n  return (\r\n    <div>\r\n\r\n <Descriptions title=\"User Info\" bordered>\r\n    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\r\n    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\r\n    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\r\n    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\r\n    \r\n   \r\n  </Descriptions>,\r\n\r\n  <MapWithAMarker\r\n  googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg&v=3.exp&libraries=geometry,drawing,places\"\r\n  loadingElement={<div style={{ height: `100%` }} />}\r\n  containerElement={<div style={{ height: `400px` }} />}\r\n  mapElement={<div style={{ height: `100%` }} />}\r\n/>\r\n    </div>\r\n  \r\n  );\r\n}\r\n}\r\n\r\nexport default Map;*/","map":{"version":3,"sources":["C:/Users/mohcine/Desktop/project_pfe/wayz/src/Map/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Descriptions","man","Cardlist1","SearchMap","setApiKey","enableDebug","LocationSearchModal","state","typeV","typeR","isOpen","indexOpen","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","onVchange","event","setState","target","value","onRchange","console","log","handleToggleOpen","index","handleToggleClose","getCity","addressArray","i","length","types","long_name","getArea","j","getState","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","formatted_address","address_components","error","onPlaceSelected","place","latValue","geometry","location","lngValue","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","AsyncMap","props","google","url","scaledSize","window","maps","Size","padding","margin","maxWidth","Component"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport {  withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport { Descriptions } from 'antd';\r\n\r\nimport man from './man.png';\r\n\r\nimport Cardlist1 from './CardCarLocation';\r\nimport SearchMap from './SearchMap';\r\n\r\nGeocode.setApiKey(\"AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg\");\r\nGeocode.enableDebug();\r\n\r\nclass LocationSearchModal extends React.Component {\r\n  \r\n\r\n    state = {\r\n       typeV:'',\r\n       typeR:'',\r\n       isOpen: false,\r\n       indexOpen:-1,\r\n        address: '',\r\n        city: '',\r\n        area: '',\r\n        state: '',\r\n        zoom: 15,\r\n        height: 400,\r\n        mapPosition: {\r\n            lat: 0,\r\n            lng: 0,\r\n        },\r\n        markerPosition: {\r\n            lat: 0,\r\n            lng: 0,\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (navigator.geolocation) {\r\n\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.setState({\r\n                    mapPosition: {\r\n                        lat: position.coords.latitude,\r\n                        lng: position.coords.longitude,\r\n                    },\r\n                    markerPosition: {\r\n                        lat: position.coords.latitude,\r\n                        lng: position.coords.longitude,\r\n                    }\r\n                },\r\n                    () => {\r\n                        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\r\n                            response => {\r\n                                console.log(response)\r\n                                const address = response.results[0].formatted_address,\r\n                                    addressArray = response.results[0].address_components,\r\n                                    city = this.getCity(addressArray),\r\n                                    area = this.getArea(addressArray),\r\n                                    state = this.getState(addressArray);\r\n                                console.log('city', city, area, state);\r\n                                this.setState({\r\n                                    address: (address) ? address : '',\r\n                                    area: (area) ? area : '',\r\n                                    city: (city) ? city : '',\r\n                                    state: (state) ? state : '',\r\n                                })\r\n                            },\r\n                            error => {\r\n                                console.error(error);\r\n                            }\r\n                        );\r\n\r\n                    })\r\n            });\r\n        } else {\r\n            console.error(\"Geolocation is not supported by this browser!\");\r\n        }\r\n    };\r\n\r\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    //     if (\r\n    //         this.state.markerPosition.lat !== this.state.center.lat ||\r\n    //         this.state.address !== nextState.address ||\r\n    //         this.state.city !== nextState.city ||\r\n    //         this.state.area !== nextState.area ||\r\n    //         this.state.state !== nextState.state\r\n    //     ) {\r\n    //         return true\r\n    //     } else if (this.state.mapPosition.lat === nextState.mapPosition.lat) {\r\n    //         return false\r\n    //     }\r\n    // }\r\n   onVchange = (event) => {\r\n  \r\n  this.setState({typeV: event.target.value });\r\n  \r\n}\r\n\r\n  onRchange = (event) => {\r\n  \r\n  this.setState({typeR: event.target.value });\r\n  console.log('typeR',this.state.typeR);\r\n  \r\n}\r\n    \r\n\r\n    handleToggleOpen = (index) => {\r\n    this.setState({\r\n      isOpen: true,\r\n      indexOpen:index\r\n    });\r\n  };\r\n\r\n  handleToggleClose = () => {\r\n    this.setState({\r\n      isOpen: false,\r\n    });\r\n  };\r\n\r\n\r\n    getCity = (addressArray) => {\r\n        let city = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\r\n                city = addressArray[i].long_name;\r\n                return city;\r\n            }\r\n        }\r\n    };\r\n\r\n    getArea = (addressArray) => {\r\n        let area = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            if (addressArray[i].types[0]) {\r\n                for (let j = 0; j < addressArray[i].types.length; j++) {\r\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\r\n                        area = addressArray[i].long_name;\r\n                        return area;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    getState = (addressArray) => {\r\n        let state = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            for (let i = 0; i < addressArray.length; i++) {\r\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\r\n                    state = addressArray[i].long_name;\r\n                    return state;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    \r\n   \r\n\r\n    onMarkerDragEnd = (event) => {\r\n        let newLat = event.latLng.lat(),\r\n            newLng = event.latLng.lng();\r\n\r\n        Geocode.fromLatLng(newLat, newLng).then(\r\n            response => {\r\n                const address = response.results[0].formatted_address,\r\n                    addressArray = response.results[0].address_components,\r\n                    city = this.getCity(addressArray),\r\n                    area = this.getArea(addressArray),\r\n                    state = this.getState(addressArray);\r\n                this.setState({\r\n                    address: (address) ? address : '',\r\n                    area: (area) ? area : '',\r\n                    city: (city) ? city : '',\r\n                    state: (state) ? state : '',\r\n                    markerPosition: {\r\n                        lat: newLat,\r\n                        lng: newLng\r\n                    },\r\n                    mapPosition: {\r\n                        lat: newLat,\r\n                        lng: newLng\r\n                    },\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        );\r\n    };\r\n\r\n    onPlaceSelected = (place) => {\r\n        console.log('plc', place);\r\n        const address = place.formatted_address,\r\n            addressArray = place.address_components,\r\n            city = this.getCity(addressArray),\r\n            area = this.getArea(addressArray),\r\n            state = this.getState(addressArray),\r\n            latValue = place.geometry.location.lat(),\r\n            lngValue = place.geometry.location.lng();\r\n\r\n        console.log('latvalue', latValue)\r\n        console.log('lngValue', lngValue)\r\n\r\n        // Set these values in the state.\r\n        this.setState({\r\n            address: (address) ? address : '',\r\n            area: (area) ? area : '',\r\n            city: (city) ? city : '',\r\n            state: (state) ? state : '',\r\n            markerPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n            mapPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n        })\r\n    };\r\n\r\n\r\n\r\n\r\n    // const AsyncMap = compose(\r\n    //     withProps({\r\n    //         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyALVjLwOIM1gf7EzdJJVmWLKdLP-yZGTcw&v=3.exp&libraries=geometry,drawing,places\",\r\n    //         loadingElement: <div style={{ height: `100%` }} />,\r\n    //         containerElement: <div style={{ height: `400px` }} />,\r\n    //         mapElement: <div style={{ height: `100%` }} />,\r\n    //     }),\r\n    //     withScriptjs,\r\n    //     withGoogleMap\r\n    // )((props) =>\r\n    //     <GoogleMap\r\n\r\n    render() {\r\n\r\n          \r\n   \r\n        const AsyncMap = withScriptjs(\r\n            withGoogleMap(\r\n                props => (\r\n                    <GoogleMap\r\n                        defaultZoom={this.state.zoom}\r\n                        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n                    >\r\n                        {/* InfoWindow on top of marker */}\r\n\r\n                        {/*Marker*/}\r\n                        <Marker\r\n                            key={-1}\r\n                            google={this.props.google}\r\n                            name={'Dolores park'}\r\n                            draggable={true}\r\n                            onDragEnd={this.onMarkerDragEnd}\r\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n                            \r\n                             icon={{\r\n\r\n                                  url: man,\r\n                                  scaledSize : new window.google.maps.Size(25,25 ),\r\n\r\n    }}\r\n\r\n        \r\n                            \r\n                         onClick={() => this.handleToggleOpen(-1)}\r\n\r\n        \r\n                            \r\n                        >\r\n                       {this.state.isOpen && -1===this.state.indexOpen &&( \r\n                        <InfoWindow\r\n                            \r\n                        >\r\n                         \r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\r\n                            </div>\r\n                        </InfoWindow>)}\r\n                    </Marker>\r\n                       \r\n      \r\n                         \r\n                        <Cardlist1 handleToggleOpen={this.handleToggleOpen} isOpen={this.state.isOpen} indexOpen={this.state.indexOpen} google={this.props.google} \r\n                                   typeV={this.state.typeV}  typeR={this.state.typeR} />\r\n                       \r\n\r\n                        {/* <MarkerWithLabel\r\n                            position={{ lat: -34.397, lng: 150.644 }}\r\n                            labelAnchor={new google.maps.Point(0, 0)}\r\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\r\n                        >\r\n                            <div>Hello There!</div>\r\n                        </MarkerWithLabel> */}\r\n\r\n\r\n                        {/* For Auto complete Search Box */}\r\n                        \r\n                    </GoogleMap>\r\n                )\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div className='tc' style={{ padding: '1rem', margin: '0 auto', maxWidth: 1000 }}>\r\n                \r\n               \r\n            <SearchMap onPlaceSelected={this.onPlaceSelected} \r\n                       onVchange={this.onVchange} onRchange={this.onRchange} />\r\n\r\n                <AsyncMap\r\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg&libraries=places\"\r\n                    loadingElement={\r\n                        <div style={{ height: `100%` }} />\r\n                    }\r\n                    containerElement={\r\n                        <div style={{ height: this.state.height }} />\r\n                    }\r\n                    mapElement={\r\n                        <div style={{ height: `100%` }} />\r\n                    }\r\n                /> \r\n                <Descriptions bordered>\r\n                    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\r\n                </Descriptions>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default LocationSearchModal;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React, { Component } from \"react\";\r\nimport {\r\n  InfoWindow,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport { Descriptions} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport AutoComplete from 'react-google-autocomplete'\r\n\r\nGeocode.setApiKey(\"AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg\");\r\n\r\nclass Map extends Component {\r\n\r\n\r\n  constructor(){\r\n  super();\r\n   this.state={\r\n   address:\"\",\r\n   city:\"\",\r\n   area:\"\",\r\n   state:\"\",\r\n   zoom:15,\r\n   height:400,\r\n   mapPosition:{\r\n    lat:0,\r\n    lng:0,\r\n   },\r\n   markerPosition:{\r\n    lat:0,\r\n    lng:0,\r\n   }\r\n\r\n\r\n\r\n  }  }  \r\n\r\n componentDidMount(){\r\n\r\n\r\n\r\n   if(navigator.geolocation){\r\n  navigator.geolocation.getCurrentPosition(position =>{\r\n    console.log('position',position)\r\n      this.setState({\r\n         mapPosition:{\r\n             lat:position.coords.latitude,\r\n             lng:position.coords.longitude,\r\n          },\r\n         markerPosition:{\r\n             lat:position.coords.latitude,\r\n             lng:position.coords.longitude,\r\n         }\r\n      },()=>{\r\n        Geocode.fromLatLng(position.coords.latitude,position.coords.longitude)\r\n  .then(response=>{\r\n    console.log('response',response);\r\n\r\n    const address=response.results[0].formatted_address,\r\n          addressArray=response.results[0].address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray);\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n                \r\n          })\r\n  })\r\n      })\r\n  })\r\n\r\n   }\r\n }\r\n\r\n getCity=(addressArray)=>{\r\n  let city=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n     if(addressArray[i].types[0] && 'administrative_area_level_2'===addressArray[i].types[0]){\r\n      city=addressArray[i].long_name;\r\n      return city;\r\n     }\r\n\r\n  }\r\n \r\n\r\n }\r\n\r\n getArea=(addressArray)=>{\r\n  let area=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n     if(addressArray[i].types[0]){\r\n        for(let j=0;j<addressArray.length;j++){\r\n     if('sublocality_level_1'===addressArray[i].types[j] || 'locality'===addressArray[i].types[j] )\r\n           area=addressArray[i].long_name;\r\n         return area;\r\n        }\r\n\r\n      \r\n    \r\n     }\r\n\r\n  }\r\n\r\n\r\n }\r\n\r\n\r\n  getState=(addressArray)=>{\r\n  let state=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n  for(let i=0;i<addressArray.length;i++){\r\n    if(addressArray[i].types[0] && 'administrative_area_level_1'===addressArray[i].types[0]){\r\n      state=addressArray[i].long_name;\r\n      return state\r\n\r\n    }\r\n  }   \r\n\r\n     \r\n     }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n onMarkerDragEnd=(event)=>{\r\n\r\n  let newLat=event.latLng.lat();\r\n  let newLng=event.latLng.lng();\r\n\r\n  console.log('new lat',newLat,'newLng',newLng);\r\n\r\n  Geocode.fromLatLng(newLat,newLng)\r\n  .then(response=>{\r\n    console.log('response',response);\r\n\r\n    const address=response.results[0].formatted_address,\r\n          addressArray=response.results[0].address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray);\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n            mapPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            },\r\n            markerPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            }      \r\n          })\r\n  })\r\n\r\n  }\r\n\r\n\r\n   onPlaceSelected=(place)=>{\r\n     const address=place.formatted_address,\r\n          addressArray=place.address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray),\r\n          newLat=place.geometry.location.lat(),\r\n          newLng=place.geometry.location.lng();\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n            mapPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            },\r\n            markerPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            }      \r\n          })\r\n  }\r\n\r\n  render(){\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n  const MapWithAMarker = withScriptjs(withGoogleMap(props =>\r\n  <GoogleMap\r\n    defaultZoom={11}\r\n    defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n  >\r\n    <Marker\r\n      draggable={true}\r\n      onDragEnd={this.onMarkerDragEnd}\r\n      position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n    >\r\n<InfoWindow>\r\n  <p> Hello </p>\r\n\r\n</InfoWindow>\r\n\r\n\r\n    </Marker>\r\n\r\n    <AutoComplete\r\n    style={{width:\"100%\",height:'40px' ,paddingLeft:16,marginTop:2,marginBottom:'2rem'}}\r\n    types={ [\"(regions)\"]}\r\n     onPlaceSelected={this.onPlaceSelected}\r\n    />\r\n\r\n  </GoogleMap>\r\n));\r\n\r\n  return (\r\n    <div>\r\n\r\n <Descriptions title=\"User Info\" bordered>\r\n    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\r\n    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\r\n    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\r\n    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\r\n    \r\n   \r\n  </Descriptions>,\r\n\r\n  <MapWithAMarker\r\n  googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg&v=3.exp&libraries=geometry,drawing,places\"\r\n  loadingElement={<div style={{ height: `100%` }} />}\r\n  containerElement={<div style={{ height: `400px` }} />}\r\n  mapElement={<div style={{ height: `100%` }} />}\r\n/>\r\n    </div>\r\n  \r\n  );\r\n}\r\n}\r\n\r\nexport default Map;*/"]},"metadata":{},"sourceType":"module"}