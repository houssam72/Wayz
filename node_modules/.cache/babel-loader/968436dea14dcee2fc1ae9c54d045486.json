{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\houss\\\\desktop\\\\wayz\\\\src\\\\Map\\\\Map.js\";\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport { Descriptions } from 'antd';\nimport car2 from './car2.png';\nimport man from './man.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setApiKey(\"AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg\");\nGeocode.enableDebug();\n\nclass LocationSearchModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isOpen: false,\n      indexOpen: -1,\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      zoom: 15,\n      height: 400,\n      mapPosition: {\n        lat: 0,\n        lng: 0\n      },\n      markerPosition: {\n        lat: 0,\n        lng: 0\n      }\n    };\n\n    this.handleToggleOpen = index => {\n      this.setState({\n        isOpen: true,\n        indexOpen: index\n      });\n    };\n\n    this.handleToggleClose = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.getCity = addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    this.getArea = addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    this.getState = addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.onInfoWindowClose = event => {};\n\n    this.onMarkerDragEnd = event => {\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    };\n\n    this.onPlaceSelected = place => {\n      console.log('plc', place);\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng();\n      console.log('latvalue', latValue);\n      console.log('lngValue', lngValue); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          mapPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          },\n          markerPosition: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }, () => {\n          Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(response => {\n            console.log(response);\n            const address = response.results[0].formatted_address,\n                  addressArray = response.results[0].address_components,\n                  city = this.getCity(addressArray),\n                  area = this.getArea(addressArray),\n                  state = this.getState(addressArray);\n            console.log('city', city, area, state);\n            this.setState({\n              address: address ? address : '',\n              area: area ? area : '',\n              city: city ? city : '',\n              state: state ? state : ''\n            });\n          }, error => {\n            console.error(error);\n          });\n        });\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser!\");\n    }\n  }\n\n  // const AsyncMap = compose(\n  //     withProps({\n  //         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyALVjLwOIM1gf7EzdJJVmWLKdLP-yZGTcw&v=3.exp&libraries=geometry,drawing,places\",\n  //         loadingElement: <div style={{ height: `100%` }} />,\n  //         containerElement: <div style={{ height: `400px` }} />,\n  //         mapElement: <div style={{ height: `100%` }} />,\n  //     }),\n  //     withScriptjs,\n  //     withGoogleMap\n  // )((props) =>\n  //     <GoogleMap\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultZoom: this.state.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        google: this.props.google,\n        name: 'Dolores park',\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        },\n        icon: {\n          url: man,\n          scaledSize: new window.google.maps.Size(25, 25)\n        },\n        onClick: () => this.handleToggleOpen(),\n        children: this.state.isOpen && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: 0,\n                margin: 0\n              },\n              children: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 48\n        }, this)\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        google: this.props.google,\n        name: 'Dolores park',\n        position: {\n          lat: 33.5846,\n          lng: -7.5911\n        },\n        icon: {\n          url: car2,\n          scaledSize: new window.google.maps.Size(50, 50)\n        },\n        onClick: () => this.handleToggleOpen(),\n        children: this.state.isOpen && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: 0,\n                margin: 0\n              },\n              children: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 48\n        }, this)\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        google: this.props.google,\n        name: 'Dolores park',\n        position: {\n          lat: 33.5688,\n          lng: -7.5877\n        },\n        icon: {\n          url: car2,\n          scaledSize: new window.google.maps.Size(50, 50)\n        },\n        onClick: () => this.handleToggleOpen(),\n        children: this.state.isOpen && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: 0,\n                margin: 0\n              },\n              children: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 48\n        }, this)\n      }, 2, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        google: this.props.google,\n        name: 'Dolores park',\n        position: {\n          lat: 33.5795,\n          lng: -7.5829\n        },\n        icon: {\n          url: car2,\n          scaledSize: new window.google.maps.Size(50, 50)\n        },\n        onClick: () => this.handleToggleOpen(),\n        children: this.state.isOpen && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: 0,\n                margin: 0\n              },\n              children: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 48\n        }, this)\n      }, 3, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        google: this.props.google,\n        name: 'Dolores park',\n        position: {\n          lat: 33.5739472,\n          lng: -7.594480099999999\n        },\n        icon: {\n          url: car2,\n          scaledSize: new window.google.maps.Size(50, 50)\n        },\n        onClick: () => this.handleToggleOpen(),\n        children: this.state.isOpen && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                padding: 0,\n                margin: 0\n              },\n              children: this.state.address\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        style: {\n          width: '100%',\n          height: '40px',\n          paddingLeft: '16px',\n          marginTop: '2px',\n          marginBottom: '2rem'\n        },\n        onPlaceSelected: this.onPlaceSelected,\n        types: ['(regions)']\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 21\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '1rem',\n        margin: '0 auto',\n        maxWidth: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Google Map Basic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Descriptions, {\n        bordered: true,\n        children: [/*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"City\",\n          children: this.state.city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"Area\",\n          children: this.state.area\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"State\",\n          children: this.state.state\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Descriptions.Item, {\n          label: \"Address\",\n          children: this.state.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AsyncMap, {\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg&libraries=places\",\n        loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 25\n        }, this),\n        containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: this.state.height\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 25\n        }, this),\n        mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LocationSearchModal;\n{\n  /*import React, { Component } from \"react\";\r\n  import {\r\n   InfoWindow,\r\n   withScriptjs,\r\n   withGoogleMap,\r\n   GoogleMap,\r\n   Marker,\r\n  } from \"react-google-maps\";\r\n  import Geocode from \"react-geocode\";\r\n  import { Descriptions} from 'antd';\r\n  import 'antd/dist/antd.css';\r\n  import AutoComplete from 'react-google-autocomplete'\r\n  \n  Geocode.setApiKey(\"AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg\");\r\n  \n  class Map extends Component {\r\n  \n  \n   constructor(){\r\n   super();\r\n    this.state={\r\n    address:\"\",\r\n    city:\"\",\r\n    area:\"\",\r\n    state:\"\",\r\n    zoom:15,\r\n    height:400,\r\n    mapPosition:{\r\n     lat:0,\r\n     lng:0,\r\n    },\r\n    markerPosition:{\r\n     lat:0,\r\n     lng:0,\r\n    }\r\n  \n  \n  \n   }  }  \r\n  \n  componentDidMount(){\r\n  \n  \n  \n    if(navigator.geolocation){\r\n   navigator.geolocation.getCurrentPosition(position =>{\r\n     console.log('position',position)\r\n       this.setState({\r\n          mapPosition:{\r\n              lat:position.coords.latitude,\r\n              lng:position.coords.longitude,\r\n           },\r\n          markerPosition:{\r\n              lat:position.coords.latitude,\r\n              lng:position.coords.longitude,\r\n          }\r\n       },()=>{\r\n         Geocode.fromLatLng(position.coords.latitude,position.coords.longitude)\r\n   .then(response=>{\r\n     console.log('response',response);\r\n  \n     const address=response.results[0].formatted_address,\r\n           addressArray=response.results[0].address_components,\r\n           city=this.getCity(addressArray),\r\n           area=this.getArea(addressArray),\r\n           state=this.getState(addressArray);\r\n  \n           this.setState({\r\n            address:(address) ? address :\"\",\r\n             area:(area) ? area :\"\",\r\n             city:(city) ? city :\"\",\r\n             state:(state) ? state :\"\",\r\n                 \r\n           })\r\n   })\r\n       })\r\n   })\r\n  \n    }\r\n  }\r\n  \n  getCity=(addressArray)=>{\r\n   let city=''\r\n   for(let i=0;i<addressArray.length;i++){\r\n      if(addressArray[i].types[0] && 'administrative_area_level_2'===addressArray[i].types[0]){\r\n       city=addressArray[i].long_name;\r\n       return city;\r\n      }\r\n  \n   }\r\n  \r\n  \n  }\r\n  \n  getArea=(addressArray)=>{\r\n   let area=''\r\n   for(let i=0;i<addressArray.length;i++){\r\n      if(addressArray[i].types[0]){\r\n         for(let j=0;j<addressArray.length;j++){\r\n      if('sublocality_level_1'===addressArray[i].types[j] || 'locality'===addressArray[i].types[j] )\r\n            area=addressArray[i].long_name;\r\n          return area;\r\n         }\r\n  \n       \r\n     \r\n      }\r\n  \n   }\r\n  \n  \n  }\r\n  \n  \n   getState=(addressArray)=>{\r\n   let state=''\r\n   for(let i=0;i<addressArray.length;i++){\r\n   for(let i=0;i<addressArray.length;i++){\r\n     if(addressArray[i].types[0] && 'administrative_area_level_1'===addressArray[i].types[0]){\r\n       state=addressArray[i].long_name;\r\n       return state\r\n  \n     }\r\n   }   \r\n  \n      \r\n      }\r\n  \n   }\r\n  \n  \n  \n  \n  \n  onMarkerDragEnd=(event)=>{\r\n  \n   let newLat=event.latLng.lat();\r\n   let newLng=event.latLng.lng();\r\n  \n   console.log('new lat',newLat,'newLng',newLng);\r\n  \n   Geocode.fromLatLng(newLat,newLng)\r\n   .then(response=>{\r\n     console.log('response',response);\r\n  \n     const address=response.results[0].formatted_address,\r\n           addressArray=response.results[0].address_components,\r\n           city=this.getCity(addressArray),\r\n           area=this.getArea(addressArray),\r\n           state=this.getState(addressArray);\r\n  \n           this.setState({\r\n            address:(address) ? address :\"\",\r\n             area:(area) ? area :\"\",\r\n             city:(city) ? city :\"\",\r\n             state:(state) ? state :\"\",\r\n             mapPosition:{\r\n               lat:newLat,\r\n               lng:newLng\r\n             },\r\n             markerPosition:{\r\n               lat:newLat,\r\n               lng:newLng\r\n             }      \r\n           })\r\n   })\r\n  \n   }\r\n  \n  \n    onPlaceSelected=(place)=>{\r\n      const address=place.formatted_address,\r\n           addressArray=place.address_components,\r\n           city=this.getCity(addressArray),\r\n           area=this.getArea(addressArray),\r\n           state=this.getState(addressArray),\r\n           newLat=place.geometry.location.lat(),\r\n           newLng=place.geometry.location.lng();\r\n  \n           this.setState({\r\n            address:(address) ? address :\"\",\r\n             area:(area) ? area :\"\",\r\n             city:(city) ? city :\"\",\r\n             state:(state) ? state :\"\",\r\n             mapPosition:{\r\n               lat:newLat,\r\n               lng:newLng\r\n             },\r\n             markerPosition:{\r\n               lat:newLat,\r\n               lng:newLng\r\n             }      \r\n           })\r\n   }\r\n  \n   render(){\r\n  \n  \n  \n  \n  \r\n  \r\n  \n   const MapWithAMarker = withScriptjs(withGoogleMap(props =>\r\n   <GoogleMap\r\n     defaultZoom={11}\r\n     defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n   >\r\n     <Marker\r\n       draggable={true}\r\n       onDragEnd={this.onMarkerDragEnd}\r\n       position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n     >\r\n  <InfoWindow>\r\n   <p> Hello </p>\r\n  \n  </InfoWindow>\r\n  \n  \n     </Marker>\r\n  \n     <AutoComplete\r\n     style={{width:\"100%\",height:'40px' ,paddingLeft:16,marginTop:2,marginBottom:'2rem'}}\r\n     types={ [\"(regions)\"]}\r\n      onPlaceSelected={this.onPlaceSelected}\r\n     />\r\n  \n   </GoogleMap>\r\n  ));\r\n  \n   return (\r\n     <div>\r\n  \n  <Descriptions title=\"User Info\" bordered>\r\n     <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\r\n     <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\r\n     <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\r\n     <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\r\n     \r\n    \r\n   </Descriptions>,\r\n  \n   <MapWithAMarker\r\n   googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg&v=3.exp&libraries=geometry,drawing,places\"\r\n   loadingElement={<div style={{ height: `100%` }} />}\r\n   containerElement={<div style={{ height: `400px` }} />}\r\n   mapElement={<div style={{ height: `100%` }} />}\r\n  />\r\n     </div>\r\n   \r\n   );\r\n  }\r\n  }\r\n  \n  export default Map;*/\n}","map":{"version":3,"sources":["C:/Users/houss/desktop/wayz/src/Map/Map.js"],"names":["React","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","Descriptions","car2","man","setApiKey","enableDebug","LocationSearchModal","Component","state","isOpen","indexOpen","address","city","area","zoom","height","mapPosition","lat","lng","markerPosition","handleToggleOpen","index","setState","handleToggleClose","getCity","addressArray","i","length","types","long_name","getArea","j","getState","onChange","event","target","name","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","newLng","fromLatLng","then","response","results","formatted_address","address_components","error","console","onPlaceSelected","place","log","latValue","geometry","location","lngValue","componentDidMount","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","render","AsyncMap","props","google","url","scaledSize","window","maps","Size","padding","margin","width","paddingLeft","marginTop","marginBottom","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAUC,aAAV,EAAyBC,SAAzB,EAAoCC,YAApC,EAAkDC,UAAlD,EAA8DC,MAA9D,QAA4E,mBAA5E;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,GAAP,MAAgB,WAAhB;;AAEAJ,OAAO,CAACK,SAAR,CAAkB,yCAAlB;AACAL,OAAO,CAACM,WAAR;;AAEA,MAAMC,mBAAN,SAAkCb,KAAK,CAACc,SAAxC,CAAkD;AAAA;AAAA;AAAA,SAG9CC,KAH8C,GAGtC;AACLC,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,SAAS,EAAC,CAAC,CAFN;AAGJC,MAAAA,OAAO,EAAE,EAHL;AAIJC,MAAAA,IAAI,EAAE,EAJF;AAKJC,MAAAA,IAAI,EAAE,EALF;AAMJL,MAAAA,KAAK,EAAE,EANH;AAOJM,MAAAA,IAAI,EAAE,EAPF;AAQJC,MAAAA,MAAM,EAAE,GARJ;AASJC,MAAAA,WAAW,EAAE;AACTC,QAAAA,GAAG,EAAE,CADI;AAETC,QAAAA,GAAG,EAAE;AAFI,OATT;AAaJC,MAAAA,cAAc,EAAE;AACZF,QAAAA,GAAG,EAAE,CADO;AAEZC,QAAAA,GAAG,EAAE;AAFO;AAbZ,KAHsC;;AAAA,SA+E9CE,gBA/E8C,GA+E1BC,KAAD,IAAW;AAC9B,WAAKC,QAAL,CAAc;AACZb,QAAAA,MAAM,EAAE,IADI;AAEZC,QAAAA,SAAS,EAACW;AAFE,OAAd;AAID,KApF+C;;AAAA,SAsFhDE,iBAtFgD,GAsF5B,MAAM;AACxB,WAAKD,QAAL,CAAc;AACZb,QAAAA,MAAM,EAAE;AADI,OAAd;AAGD,KA1F+C;;AAAA,SA6F9Ce,OA7F8C,GA6FnCC,YAAD,IAAkB;AACxB,UAAIb,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,YAAID,YAAY,CAACC,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,KAA4B,kCAAkCH,YAAY,CAACC,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,CAAlE,EAA4F;AACxFhB,UAAAA,IAAI,GAAGa,YAAY,CAACC,CAAD,CAAZ,CAAgBG,SAAvB;AACA,iBAAOjB,IAAP;AACH;AACJ;AACJ,KArG6C;;AAAA,SAuG9CkB,OAvG8C,GAuGnCL,YAAD,IAAkB;AACxB,UAAIZ,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,YAAID,YAAY,CAACC,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,CAAJ,EAA8B;AAC1B,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,YAAY,CAACC,CAAD,CAAZ,CAAgBE,KAAhB,CAAsBD,MAA1C,EAAkDI,CAAC,EAAnD,EAAuD;AACnD,gBAAI,0BAA0BN,YAAY,CAACC,CAAD,CAAZ,CAAgBE,KAAhB,CAAsBG,CAAtB,CAA1B,IAAsD,eAAeN,YAAY,CAACC,CAAD,CAAZ,CAAgBE,KAAhB,CAAsBG,CAAtB,CAAzE,EAAmG;AAC/FlB,cAAAA,IAAI,GAAGY,YAAY,CAACC,CAAD,CAAZ,CAAgBG,SAAvB;AACA,qBAAOhB,IAAP;AACH;AACJ;AACJ;AACJ;AACJ,KAnH6C;;AAAA,SAqH9CmB,QArH8C,GAqHlCP,YAAD,IAAkB;AACzB,UAAIjB,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,aAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACE,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,cAAID,YAAY,CAACC,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,KAA4B,kCAAkCH,YAAY,CAACC,CAAD,CAAZ,CAAgBE,KAAhB,CAAsB,CAAtB,CAAlE,EAA4F;AACxFpB,YAAAA,KAAK,GAAGiB,YAAY,CAACC,CAAD,CAAZ,CAAgBG,SAAxB;AACA,mBAAOrB,KAAP;AACH;AACJ;AACJ;AACJ,KA/H6C;;AAAA,SAiI9CyB,QAjI8C,GAiIlCC,KAAD,IAAW;AAClB,WAAKZ,QAAL,CAAc;AAAE,SAACY,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAApC,OAAd;AACH,KAnI6C;;AAAA,SAqI9CC,iBArI8C,GAqIzBJ,KAAD,IAAW,CAAG,CArIY;;AAAA,SAuI9CK,eAvI8C,GAuI3BL,KAAD,IAAW;AACzB,UAAIM,MAAM,GAAGN,KAAK,CAACO,MAAN,CAAaxB,GAAb,EAAb;AAAA,UACIyB,MAAM,GAAGR,KAAK,CAACO,MAAN,CAAavB,GAAb,EADb;AAGAnB,MAAAA,OAAO,CAAC4C,UAAR,CAAmBH,MAAnB,EAA2BE,MAA3B,EAAmCE,IAAnC,CACIC,QAAQ,IAAI;AACR,cAAMlC,OAAO,GAAGkC,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBC,iBAApC;AAAA,cACItB,YAAY,GAAGoB,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBE,kBADvC;AAAA,cAEIpC,IAAI,GAAG,KAAKY,OAAL,CAAaC,YAAb,CAFX;AAAA,cAGIZ,IAAI,GAAG,KAAKiB,OAAL,CAAaL,YAAb,CAHX;AAAA,cAIIjB,KAAK,GAAG,KAAKwB,QAAL,CAAcP,YAAd,CAJZ;AAKA,aAAKH,QAAL,CAAc;AACVX,UAAAA,OAAO,EAAGA,OAAD,GAAYA,OAAZ,GAAsB,EADrB;AAEVE,UAAAA,IAAI,EAAGA,IAAD,GAASA,IAAT,GAAgB,EAFZ;AAGVD,UAAAA,IAAI,EAAGA,IAAD,GAASA,IAAT,GAAgB,EAHZ;AAIVJ,UAAAA,KAAK,EAAGA,KAAD,GAAUA,KAAV,GAAkB,EAJf;AAKVW,UAAAA,cAAc,EAAE;AACZF,YAAAA,GAAG,EAAEuB,MADO;AAEZtB,YAAAA,GAAG,EAAEwB;AAFO,WALN;AASV1B,UAAAA,WAAW,EAAE;AACTC,YAAAA,GAAG,EAAEuB,MADI;AAETtB,YAAAA,GAAG,EAAEwB;AAFI;AATH,SAAd;AAcH,OArBL,EAsBIO,KAAK,IAAI;AACLC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH,OAxBL;AA0BH,KArK6C;;AAAA,SAuK9CE,eAvK8C,GAuK3BC,KAAD,IAAW;AACzBF,MAAAA,OAAO,CAACG,GAAR,CAAY,KAAZ,EAAmBD,KAAnB;AACA,YAAMzC,OAAO,GAAGyC,KAAK,CAACL,iBAAtB;AAAA,YACItB,YAAY,GAAG2B,KAAK,CAACJ,kBADzB;AAAA,YAEIpC,IAAI,GAAG,KAAKY,OAAL,CAAaC,YAAb,CAFX;AAAA,YAGIZ,IAAI,GAAG,KAAKiB,OAAL,CAAaL,YAAb,CAHX;AAAA,YAIIjB,KAAK,GAAG,KAAKwB,QAAL,CAAcP,YAAd,CAJZ;AAAA,YAKI6B,QAAQ,GAAGF,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBvC,GAAxB,EALf;AAAA,YAMIwC,QAAQ,GAAGL,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBtC,GAAxB,EANf;AAQAgC,MAAAA,OAAO,CAACG,GAAR,CAAY,UAAZ,EAAwBC,QAAxB;AACAJ,MAAAA,OAAO,CAACG,GAAR,CAAY,UAAZ,EAAwBI,QAAxB,EAXyB,CAazB;;AACA,WAAKnC,QAAL,CAAc;AACVX,QAAAA,OAAO,EAAGA,OAAD,GAAYA,OAAZ,GAAsB,EADrB;AAEVE,QAAAA,IAAI,EAAGA,IAAD,GAASA,IAAT,GAAgB,EAFZ;AAGVD,QAAAA,IAAI,EAAGA,IAAD,GAASA,IAAT,GAAgB,EAHZ;AAIVJ,QAAAA,KAAK,EAAGA,KAAD,GAAUA,KAAV,GAAkB,EAJf;AAKVW,QAAAA,cAAc,EAAE;AACZF,UAAAA,GAAG,EAAEqC,QADO;AAEZpC,UAAAA,GAAG,EAAEuC;AAFO,SALN;AASVzC,QAAAA,WAAW,EAAE;AACTC,UAAAA,GAAG,EAAEqC,QADI;AAETpC,UAAAA,GAAG,EAAEuC;AAFI;AATH,OAAd;AAcH,KAnM6C;AAAA;;AAuB9CC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACvBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAI;AACjD,aAAKxC,QAAL,CAAc;AACVN,UAAAA,WAAW,EAAE;AACTC,YAAAA,GAAG,EAAE6C,QAAQ,CAACC,MAAT,CAAgBC,QADZ;AAET9C,YAAAA,GAAG,EAAE4C,QAAQ,CAACC,MAAT,CAAgBE;AAFZ,WADH;AAKV9C,UAAAA,cAAc,EAAE;AACZF,YAAAA,GAAG,EAAE6C,QAAQ,CAACC,MAAT,CAAgBC,QADT;AAEZ9C,YAAAA,GAAG,EAAE4C,QAAQ,CAACC,MAAT,CAAgBE;AAFT;AALN,SAAd,EAUI,MAAM;AACFlE,UAAAA,OAAO,CAAC4C,UAAR,CAAmBmB,QAAQ,CAACC,MAAT,CAAgBC,QAAnC,EAA6CF,QAAQ,CAACC,MAAT,CAAgBE,SAA7D,EAAwErB,IAAxE,CACIC,QAAQ,IAAI;AACRK,YAAAA,OAAO,CAACG,GAAR,CAAYR,QAAZ;AACA,kBAAMlC,OAAO,GAAGkC,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBC,iBAApC;AAAA,kBACItB,YAAY,GAAGoB,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAoBE,kBADvC;AAAA,kBAEIpC,IAAI,GAAG,KAAKY,OAAL,CAAaC,YAAb,CAFX;AAAA,kBAGIZ,IAAI,GAAG,KAAKiB,OAAL,CAAaL,YAAb,CAHX;AAAA,kBAIIjB,KAAK,GAAG,KAAKwB,QAAL,CAAcP,YAAd,CAJZ;AAKAyB,YAAAA,OAAO,CAACG,GAAR,CAAY,MAAZ,EAAoBzC,IAApB,EAA0BC,IAA1B,EAAgCL,KAAhC;AACA,iBAAKc,QAAL,CAAc;AACVX,cAAAA,OAAO,EAAGA,OAAD,GAAYA,OAAZ,GAAsB,EADrB;AAEVE,cAAAA,IAAI,EAAGA,IAAD,GAASA,IAAT,GAAgB,EAFZ;AAGVD,cAAAA,IAAI,EAAGA,IAAD,GAASA,IAAT,GAAgB,EAHZ;AAIVJ,cAAAA,KAAK,EAAGA,KAAD,GAAUA,KAAV,GAAkB;AAJf,aAAd;AAMH,WAfL,EAgBIyC,KAAK,IAAI;AACLC,YAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH,WAlBL;AAqBH,SAhCL;AAiCH,OAlCD;AAmCH,KApCD,MAoCO;AACHC,MAAAA,OAAO,CAACD,KAAR,CAAc,+CAAd;AACH;AACJ;;AAsID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAiB,EAAAA,MAAM,GAAG;AAEL,UAAMC,QAAQ,GAAGvE,YAAY,CACzBF,aAAa,CACT0E,KAAK,iBACD,QAAC,SAAD;AACI,MAAA,WAAW,EAAE,KAAK5D,KAAL,CAAWM,IAD5B;AAEI,MAAA,aAAa,EAAE;AAAEG,QAAAA,GAAG,EAAE,KAAKT,KAAL,CAAWQ,WAAX,CAAuBC,GAA9B;AAAmCC,QAAAA,GAAG,EAAE,KAAKV,KAAL,CAAWQ,WAAX,CAAuBE;AAA/D,OAFnB;AAAA,8BAOI,QAAC,MAAD;AAEI,QAAA,MAAM,EAAE,KAAKkD,KAAL,CAAWC,MAFvB;AAGI,QAAA,IAAI,EAAE,cAHV;AAII,QAAA,SAAS,EAAE,IAJf;AAKI,QAAA,SAAS,EAAE,KAAK9B,eALpB;AAMI,QAAA,QAAQ,EAAE;AAAEtB,UAAAA,GAAG,EAAE,KAAKT,KAAL,CAAWW,cAAX,CAA0BF,GAAjC;AAAsCC,UAAAA,GAAG,EAAE,KAAKV,KAAL,CAAWW,cAAX,CAA0BD;AAArE,SANd;AAQK,QAAA,IAAI,EAAE;AAEDoD,UAAAA,GAAG,EAAEnE,GAFJ;AAGDoE,UAAAA,UAAU,EAAG,IAAIC,MAAM,CAACH,MAAP,CAAcI,IAAd,CAAmBC,IAAvB,CAA4B,EAA5B,EAA+B,EAA/B;AAHZ,SARX;AAiBC,QAAA,OAAO,EAAE,MAAM,KAAKtD,gBAAL,EAjBhB;AAAA,kBAsBA,KAAKZ,KAAL,CAAWC,MAAX,iBAAuB,QAAC,UAAD;AAAA,iCAInB;AAAA,mCACI;AAAM,cAAA,KAAK,EAAE;AAAEkE,gBAAAA,OAAO,EAAE,CAAX;AAAcC,gBAAAA,MAAM,EAAE;AAAtB,eAAb;AAAA,wBAAyC,KAAKpE,KAAL,CAAWG;AAApD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJmB;AAAA;AAAA;AAAA;AAAA;AAtBvB,SACS,CADT;AAAA;AAAA;AAAA;AAAA,cAPJ,eAwCK,QAAC,MAAD;AAEG,QAAA,MAAM,EAAE,KAAKyD,KAAL,CAAWC,MAFtB;AAGG,QAAA,IAAI,EAAE,cAHT;AAIG,QAAA,QAAQ,EAAE;AAAEpD,UAAAA,GAAG,EAAE,OAAP;AAAgBC,UAAAA,GAAG,EAAE,CAAC;AAAtB,SAJb;AAMI,QAAA,IAAI,EAAE;AAELoD,UAAAA,GAAG,EAAEpE,IAFA;AAGLqE,UAAAA,UAAU,EAAG,IAAIC,MAAM,CAACH,MAAP,CAAcI,IAAd,CAAmBC,IAAvB,CAA4B,EAA5B,EAA+B,EAA/B;AAHR,SANV;AAeA,QAAA,OAAO,EAAE,MAAM,KAAKtD,gBAAL,EAff;AAAA,kBAoBD,KAAKZ,KAAL,CAAWC,MAAX,iBAAuB,QAAC,UAAD;AAAA,iCAInB;AAAA,mCACI;AAAM,cAAA,KAAK,EAAE;AAAEkE,gBAAAA,OAAO,EAAE,CAAX;AAAcC,gBAAAA,MAAM,EAAE;AAAtB,eAAb;AAAA,wBAAyC,KAAKpE,KAAL,CAAWG;AAApD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJmB;AAAA;AAAA;AAAA;AAAA;AApBtB,SACS,CADT;AAAA;AAAA;AAAA;AAAA,cAxCL,eAsEI,QAAC,MAAD;AAEI,QAAA,MAAM,EAAE,KAAKyD,KAAL,CAAWC,MAFvB;AAGI,QAAA,IAAI,EAAE,cAHV;AAII,QAAA,QAAQ,EAAE;AAAEpD,UAAAA,GAAG,EAAE,OAAP;AAAgBC,UAAAA,GAAG,EAAE,CAAC;AAAtB,SAJd;AAMK,QAAA,IAAI,EAAE;AAEJoD,UAAAA,GAAG,EAAEpE,IAFD;AAGJqE,UAAAA,UAAU,EAAG,IAAIC,MAAM,CAACH,MAAP,CAAcI,IAAd,CAAmBC,IAAvB,CAA4B,EAA5B,EAA+B,EAA/B;AAHT,SANX;AAeC,QAAA,OAAO,EAAE,MAAM,KAAKtD,gBAAL,EAfhB;AAAA,kBAoBA,KAAKZ,KAAL,CAAWC,MAAX,iBAAuB,QAAC,UAAD;AAAA,iCAInB;AAAA,mCACI;AAAM,cAAA,KAAK,EAAE;AAAEkE,gBAAAA,OAAO,EAAE,CAAX;AAAcC,gBAAAA,MAAM,EAAE;AAAtB,eAAb;AAAA,wBAAyC,KAAKpE,KAAL,CAAWG;AAApD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJmB;AAAA;AAAA;AAAA;AAAA;AApBvB,SACU,CADV;AAAA;AAAA;AAAA;AAAA,cAtEJ,eAmGI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAnGJ,eAoGI,QAAC,MAAD;AAEI,QAAA,MAAM,EAAE,KAAKyD,KAAL,CAAWC,MAFvB;AAGI,QAAA,IAAI,EAAE,cAHV;AAII,QAAA,QAAQ,EAAE;AAAEpD,UAAAA,GAAG,EAAE,OAAP;AAAgBC,UAAAA,GAAG,EAAE,CAAC;AAAtB,SAJd;AAMK,QAAA,IAAI,EAAE;AAENoD,UAAAA,GAAG,EAAEpE,IAFC;AAGNqE,UAAAA,UAAU,EAAG,IAAIC,MAAM,CAACH,MAAP,CAAcI,IAAd,CAAmBC,IAAvB,CAA4B,EAA5B,EAA+B,EAA/B;AAHP,SANX;AAeC,QAAA,OAAO,EAAE,MAAM,KAAKtD,gBAAL,EAfhB;AAAA,kBAoBA,KAAKZ,KAAL,CAAWC,MAAX,iBAAuB,QAAC,UAAD;AAAA,iCAInB;AAAA,mCACI;AAAM,cAAA,KAAK,EAAE;AAAEkE,gBAAAA,OAAO,EAAE,CAAX;AAAcC,gBAAAA,MAAM,EAAE;AAAtB,eAAb;AAAA,wBAAyC,KAAKpE,KAAL,CAAWG;AAApD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJmB;AAAA;AAAA;AAAA;AAAA;AApBvB,SACU,CADV;AAAA;AAAA;AAAA;AAAA,cApGJ,eAkIK,QAAC,MAAD;AAEG,QAAA,MAAM,EAAE,KAAKyD,KAAL,CAAWC,MAFtB;AAGG,QAAA,IAAI,EAAE,cAHT;AAIG,QAAA,QAAQ,EAAE;AAAEpD,UAAAA,GAAG,EAAE,UAAP;AAAmBC,UAAAA,GAAG,EAAE,CAAC;AAAzB,SAJb;AAMI,QAAA,IAAI,EAAE;AAEFoD,UAAAA,GAAG,EAAEpE,IAFH;AAGFqE,UAAAA,UAAU,EAAG,IAAIC,MAAM,CAACH,MAAP,CAAcI,IAAd,CAAmBC,IAAvB,CAA4B,EAA5B,EAA+B,EAA/B;AAHX,SANV;AAYK,QAAA,OAAO,EAAE,MAAM,KAAKtD,gBAAL,EAZpB;AAAA,kBAiBD,KAAKZ,KAAL,CAAWC,MAAX,iBAAuB,QAAC,UAAD;AAAA,iCAInB;AAAA,mCACI;AAAM,cAAA,KAAK,EAAE;AAAEkE,gBAAAA,OAAO,EAAE,CAAX;AAAcC,gBAAAA,MAAM,EAAE;AAAtB,eAAb;AAAA,wBAAyC,KAAKpE,KAAL,CAAWG;AAApD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAJmB;AAAA;AAAA;AAAA;AAAA;AAjBtB;AAAA;AAAA;AAAA;AAAA,cAlIL,eA4JI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cA5JJ,eAwKI,QAAC,YAAD;AACI,QAAA,KAAK,EAAE;AACHkE,UAAAA,KAAK,EAAE,MADJ;AAEH9D,UAAAA,MAAM,EAAE,MAFL;AAGH+D,UAAAA,WAAW,EAAE,MAHV;AAIHC,UAAAA,SAAS,EAAE,KAJR;AAKHC,UAAAA,YAAY,EAAE;AALX,SADX;AAQI,QAAA,eAAe,EAAE,KAAK7B,eAR1B;AASI,QAAA,KAAK,EAAE,CAAC,WAAD;AATX;AAAA;AAAA;AAAA;AAAA,cAxKJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFK,CADY,CAA7B;AA2LA,wBACI;AAAK,MAAA,KAAK,EAAE;AAAEwB,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,MAAM,EAAE,QAA3B;AAAqCK,QAAAA,QAAQ,EAAE;AAA/C,OAAZ;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,YAAD;AAAc,QAAA,QAAQ,MAAtB;AAAA,gCACI,QAAC,YAAD,CAAc,IAAd;AAAmB,UAAA,KAAK,EAAC,MAAzB;AAAA,oBAAiC,KAAKzE,KAAL,CAAWI;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,YAAD,CAAc,IAAd;AAAmB,UAAA,KAAK,EAAC,MAAzB;AAAA,oBAAiC,KAAKJ,KAAL,CAAWK;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,YAAD,CAAc,IAAd;AAAmB,UAAA,KAAK,EAAC,OAAzB;AAAA,oBAAkC,KAAKL,KAAL,CAAWA;AAA7C;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,YAAD,CAAc,IAAd;AAAmB,UAAA,KAAK,EAAC,SAAzB;AAAA,oBAAoC,KAAKA,KAAL,CAAWG;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eASI,QAAC,QAAD;AACI,QAAA,YAAY,EAAC,sGADjB;AAEI,QAAA,cAAc,eACV;AAAK,UAAA,KAAK,EAAE;AAAEI,YAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAHR;AAKI,QAAA,gBAAgB,eACZ;AAAK,UAAA,KAAK,EAAE;AAAEA,YAAAA,MAAM,EAAE,KAAKP,KAAL,CAAWO;AAArB;AAAZ;AAAA;AAAA;AAAA;AAAA,gBANR;AAQI,QAAA,UAAU,eACN;AAAK,UAAA,KAAK,EAAE;AAAEA,YAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA;AATR;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAwBH;;AAta6C;;AA0alD,eAAeT,mBAAf;AAqsB","sourcesContent":["import React from 'react';\r\nimport {  withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport { Descriptions } from 'antd';\r\nimport car2 from './car2.png';\r\nimport man from './man.png';\r\n\r\nGeocode.setApiKey(\"AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg\");\r\nGeocode.enableDebug();\r\n\r\nclass LocationSearchModal extends React.Component {\r\n  \r\n\r\n    state = {\r\n       isOpen: false,\r\n       indexOpen:-1,\r\n        address: '',\r\n        city: '',\r\n        area: '',\r\n        state: '',\r\n        zoom: 15,\r\n        height: 400,\r\n        mapPosition: {\r\n            lat: 0,\r\n            lng: 0,\r\n        },\r\n        markerPosition: {\r\n            lat: 0,\r\n            lng: 0,\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                this.setState({\r\n                    mapPosition: {\r\n                        lat: position.coords.latitude,\r\n                        lng: position.coords.longitude,\r\n                    },\r\n                    markerPosition: {\r\n                        lat: position.coords.latitude,\r\n                        lng: position.coords.longitude,\r\n                    }\r\n                },\r\n                    () => {\r\n                        Geocode.fromLatLng(position.coords.latitude, position.coords.longitude).then(\r\n                            response => {\r\n                                console.log(response)\r\n                                const address = response.results[0].formatted_address,\r\n                                    addressArray = response.results[0].address_components,\r\n                                    city = this.getCity(addressArray),\r\n                                    area = this.getArea(addressArray),\r\n                                    state = this.getState(addressArray);\r\n                                console.log('city', city, area, state);\r\n                                this.setState({\r\n                                    address: (address) ? address : '',\r\n                                    area: (area) ? area : '',\r\n                                    city: (city) ? city : '',\r\n                                    state: (state) ? state : '',\r\n                                })\r\n                            },\r\n                            error => {\r\n                                console.error(error);\r\n                            }\r\n                        );\r\n\r\n                    })\r\n            });\r\n        } else {\r\n            console.error(\"Geolocation is not supported by this browser!\");\r\n        }\r\n    };\r\n\r\n    // shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    //     if (\r\n    //         this.state.markerPosition.lat !== this.state.center.lat ||\r\n    //         this.state.address !== nextState.address ||\r\n    //         this.state.city !== nextState.city ||\r\n    //         this.state.area !== nextState.area ||\r\n    //         this.state.state !== nextState.state\r\n    //     ) {\r\n    //         return true\r\n    //     } else if (this.state.mapPosition.lat === nextState.mapPosition.lat) {\r\n    //         return false\r\n    //     }\r\n    // }\r\n\r\n    handleToggleOpen = (index) => {\r\n    this.setState({\r\n      isOpen: true,\r\n      indexOpen:index\r\n    });\r\n  };\r\n\r\n  handleToggleClose = () => {\r\n    this.setState({\r\n      isOpen: false,\r\n    });\r\n  };\r\n\r\n\r\n    getCity = (addressArray) => {\r\n        let city = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\r\n                city = addressArray[i].long_name;\r\n                return city;\r\n            }\r\n        }\r\n    };\r\n\r\n    getArea = (addressArray) => {\r\n        let area = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            if (addressArray[i].types[0]) {\r\n                for (let j = 0; j < addressArray[i].types.length; j++) {\r\n                    if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\r\n                        area = addressArray[i].long_name;\r\n                        return area;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    getState = (addressArray) => {\r\n        let state = '';\r\n        for (let i = 0; i < addressArray.length; i++) {\r\n            for (let i = 0; i < addressArray.length; i++) {\r\n                if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\r\n                    state = addressArray[i].long_name;\r\n                    return state;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    onChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    onInfoWindowClose = (event) => { };\r\n\r\n    onMarkerDragEnd = (event) => {\r\n        let newLat = event.latLng.lat(),\r\n            newLng = event.latLng.lng();\r\n\r\n        Geocode.fromLatLng(newLat, newLng).then(\r\n            response => {\r\n                const address = response.results[0].formatted_address,\r\n                    addressArray = response.results[0].address_components,\r\n                    city = this.getCity(addressArray),\r\n                    area = this.getArea(addressArray),\r\n                    state = this.getState(addressArray);\r\n                this.setState({\r\n                    address: (address) ? address : '',\r\n                    area: (area) ? area : '',\r\n                    city: (city) ? city : '',\r\n                    state: (state) ? state : '',\r\n                    markerPosition: {\r\n                        lat: newLat,\r\n                        lng: newLng\r\n                    },\r\n                    mapPosition: {\r\n                        lat: newLat,\r\n                        lng: newLng\r\n                    },\r\n                })\r\n            },\r\n            error => {\r\n                console.error(error);\r\n            }\r\n        );\r\n    };\r\n\r\n    onPlaceSelected = (place) => {\r\n        console.log('plc', place);\r\n        const address = place.formatted_address,\r\n            addressArray = place.address_components,\r\n            city = this.getCity(addressArray),\r\n            area = this.getArea(addressArray),\r\n            state = this.getState(addressArray),\r\n            latValue = place.geometry.location.lat(),\r\n            lngValue = place.geometry.location.lng();\r\n\r\n        console.log('latvalue', latValue)\r\n        console.log('lngValue', lngValue)\r\n\r\n        // Set these values in the state.\r\n        this.setState({\r\n            address: (address) ? address : '',\r\n            area: (area) ? area : '',\r\n            city: (city) ? city : '',\r\n            state: (state) ? state : '',\r\n            markerPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n            mapPosition: {\r\n                lat: latValue,\r\n                lng: lngValue\r\n            },\r\n        })\r\n    };\r\n\r\n    // const AsyncMap = compose(\r\n    //     withProps({\r\n    //         googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyALVjLwOIM1gf7EzdJJVmWLKdLP-yZGTcw&v=3.exp&libraries=geometry,drawing,places\",\r\n    //         loadingElement: <div style={{ height: `100%` }} />,\r\n    //         containerElement: <div style={{ height: `400px` }} />,\r\n    //         mapElement: <div style={{ height: `100%` }} />,\r\n    //     }),\r\n    //     withScriptjs,\r\n    //     withGoogleMap\r\n    // )((props) =>\r\n    //     <GoogleMap\r\n\r\n    render() {\r\n   \r\n        const AsyncMap = withScriptjs(\r\n            withGoogleMap(\r\n                props => (\r\n                    <GoogleMap\r\n                        defaultZoom={this.state.zoom}\r\n                        defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n                    >\r\n                        {/* InfoWindow on top of marker */}\r\n\r\n                        {/*Marker*/}\r\n                        <Marker\r\n                            key={0}\r\n                            google={this.props.google}\r\n                            name={'Dolores park'}\r\n                            draggable={true}\r\n                            onDragEnd={this.onMarkerDragEnd}\r\n                            position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n                            \r\n                             icon={{\r\n\r\n                                  url: man,\r\n                                  scaledSize : new window.google.maps.Size(25,25 ),\r\n\r\n    }}\r\n\r\n        \r\n                            \r\n                         onClick={() => this.handleToggleOpen()}\r\n\r\n        \r\n                            \r\n                        >\r\n                       {this.state.isOpen && ( <InfoWindow\r\n                            \r\n                        >\r\n                         \r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\r\n                            </div>\r\n                        </InfoWindow>)}\r\n                    </Marker>\r\n                       \r\n\r\n                         <Marker\r\n                             key={1}\r\n                            google={this.props.google}\r\n                            name={'Dolores park'}\r\n                            position={{ lat: 33.5846, lng: -7.5911 }}\r\n                            \r\n                             icon={{\r\n\r\n                              url: car2,\r\n                              scaledSize : new window.google.maps.Size(50,50 ),\r\n\r\n    }}\r\n\r\n        \r\n                            \r\n                         onClick={() => this.handleToggleOpen()}\r\n\r\n        \r\n                            \r\n                        >\r\n                       {this.state.isOpen && ( <InfoWindow\r\n                            \r\n                        >\r\n                         \r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\r\n                            </div>\r\n                        </InfoWindow>)}\r\n                    </Marker>\r\n                        \r\n                        <Marker\r\n                             key={2}\r\n                            google={this.props.google}\r\n                            name={'Dolores park'}\r\n                            position={{ lat: 33.5688, lng: -7.5877 }}\r\n                            \r\n                             icon={{\r\n\r\n                               url: car2,\r\n                               scaledSize : new window.google.maps.Size(50,50 ),\r\n\r\n    }}\r\n\r\n        \r\n                            \r\n                         onClick={() => this.handleToggleOpen()}\r\n\r\n        \r\n                            \r\n                        >\r\n                       {this.state.isOpen && ( <InfoWindow\r\n                            \r\n                        >\r\n                         \r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\r\n                            </div>\r\n                        </InfoWindow>)}\r\n                    </Marker>\r\n                        <Marker />\r\n                        <Marker\r\n                             key={3}\r\n                            google={this.props.google}\r\n                            name={'Dolores park'}\r\n                            position={{ lat: 33.5795, lng: -7.5829 }}\r\n                            \r\n                             icon={{\r\n\r\n                             url: car2,\r\n                             scaledSize : new window.google.maps.Size(50,50 ),\r\n\r\n    }}\r\n\r\n        \r\n                            \r\n                         onClick={() => this.handleToggleOpen()}\r\n\r\n        \r\n                            \r\n                        >\r\n                       {this.state.isOpen && ( <InfoWindow\r\n                            \r\n                        >\r\n                         \r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\r\n                            </div>\r\n                        </InfoWindow>)}\r\n                    </Marker>\r\n                        \r\n                         <Marker\r\n                            \r\n                            google={this.props.google}\r\n                            name={'Dolores park'}\r\n                            position={{ lat: 33.5739472, lng: -7.594480099999999}}\r\n                            \r\n                             icon={{\r\n\r\n                                 url: car2,\r\n                                 scaledSize : new window.google.maps.Size(50,50 ),\r\n\r\n                              }}\r\n                              onClick={() => this.handleToggleOpen()}\r\n\r\n        \r\n                            \r\n                        >\r\n                       {this.state.isOpen && ( <InfoWindow\r\n                            \r\n                        >\r\n                         \r\n                            <div>\r\n                                <span style={{ padding: 0, margin: 0 }}>{this.state.address}</span>\r\n                            </div>\r\n                        </InfoWindow>)}\r\n                    </Marker>\r\n                        <Marker />\r\n\r\n                        {/* <MarkerWithLabel\r\n                            position={{ lat: -34.397, lng: 150.644 }}\r\n                            labelAnchor={new google.maps.Point(0, 0)}\r\n                            labelStyle={{ backgroundColor: \"yellow\", fontSize: \"32px\", padding: \"16px\" }}\r\n                        >\r\n                            <div>Hello There!</div>\r\n                        </MarkerWithLabel> */}\r\n\r\n\r\n                        {/* For Auto complete Search Box */}\r\n                        <Autocomplete\r\n                            style={{\r\n                                width: '100%',\r\n                                height: '40px',\r\n                                paddingLeft: '16px',\r\n                                marginTop: '2px',\r\n                                marginBottom: '2rem'\r\n                            }}\r\n                            onPlaceSelected={this.onPlaceSelected}\r\n                            types={['(regions)']}\r\n                        />\r\n                    </GoogleMap>\r\n                )\r\n            )\r\n        );\r\n\r\n        return (\r\n            <div style={{ padding: '1rem', margin: '0 auto', maxWidth: 1000 }}>\r\n                <h1>Google Map Basic</h1>\r\n                <Descriptions bordered>\r\n                    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\r\n                    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\r\n                </Descriptions>\r\n\r\n                <AsyncMap\r\n                    googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg&libraries=places\"\r\n                    loadingElement={\r\n                        <div style={{ height: `100%` }} />\r\n                    }\r\n                    containerElement={\r\n                        <div style={{ height: this.state.height }} />\r\n                    }\r\n                    mapElement={\r\n                        <div style={{ height: `100%` }} />\r\n                    }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default LocationSearchModal;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/*import React, { Component } from \"react\";\r\nimport {\r\n  InfoWindow,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\nimport Geocode from \"react-geocode\";\r\nimport { Descriptions} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport AutoComplete from 'react-google-autocomplete'\r\n\r\nGeocode.setApiKey(\"AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg\");\r\n\r\nclass Map extends Component {\r\n\r\n\r\n  constructor(){\r\n  super();\r\n   this.state={\r\n   address:\"\",\r\n   city:\"\",\r\n   area:\"\",\r\n   state:\"\",\r\n   zoom:15,\r\n   height:400,\r\n   mapPosition:{\r\n    lat:0,\r\n    lng:0,\r\n   },\r\n   markerPosition:{\r\n    lat:0,\r\n    lng:0,\r\n   }\r\n\r\n\r\n\r\n  }  }  \r\n\r\n componentDidMount(){\r\n\r\n\r\n\r\n   if(navigator.geolocation){\r\n  navigator.geolocation.getCurrentPosition(position =>{\r\n    console.log('position',position)\r\n      this.setState({\r\n         mapPosition:{\r\n             lat:position.coords.latitude,\r\n             lng:position.coords.longitude,\r\n          },\r\n         markerPosition:{\r\n             lat:position.coords.latitude,\r\n             lng:position.coords.longitude,\r\n         }\r\n      },()=>{\r\n        Geocode.fromLatLng(position.coords.latitude,position.coords.longitude)\r\n  .then(response=>{\r\n    console.log('response',response);\r\n\r\n    const address=response.results[0].formatted_address,\r\n          addressArray=response.results[0].address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray);\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n                \r\n          })\r\n  })\r\n      })\r\n  })\r\n\r\n   }\r\n }\r\n\r\n getCity=(addressArray)=>{\r\n  let city=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n     if(addressArray[i].types[0] && 'administrative_area_level_2'===addressArray[i].types[0]){\r\n      city=addressArray[i].long_name;\r\n      return city;\r\n     }\r\n\r\n  }\r\n \r\n\r\n }\r\n\r\n getArea=(addressArray)=>{\r\n  let area=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n     if(addressArray[i].types[0]){\r\n        for(let j=0;j<addressArray.length;j++){\r\n     if('sublocality_level_1'===addressArray[i].types[j] || 'locality'===addressArray[i].types[j] )\r\n           area=addressArray[i].long_name;\r\n         return area;\r\n        }\r\n\r\n      \r\n    \r\n     }\r\n\r\n  }\r\n\r\n\r\n }\r\n\r\n\r\n  getState=(addressArray)=>{\r\n  let state=''\r\n  for(let i=0;i<addressArray.length;i++){\r\n  for(let i=0;i<addressArray.length;i++){\r\n    if(addressArray[i].types[0] && 'administrative_area_level_1'===addressArray[i].types[0]){\r\n      state=addressArray[i].long_name;\r\n      return state\r\n\r\n    }\r\n  }   \r\n\r\n     \r\n     }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n onMarkerDragEnd=(event)=>{\r\n\r\n  let newLat=event.latLng.lat();\r\n  let newLng=event.latLng.lng();\r\n\r\n  console.log('new lat',newLat,'newLng',newLng);\r\n\r\n  Geocode.fromLatLng(newLat,newLng)\r\n  .then(response=>{\r\n    console.log('response',response);\r\n\r\n    const address=response.results[0].formatted_address,\r\n          addressArray=response.results[0].address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray);\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n            mapPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            },\r\n            markerPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            }      \r\n          })\r\n  })\r\n\r\n  }\r\n\r\n\r\n   onPlaceSelected=(place)=>{\r\n     const address=place.formatted_address,\r\n          addressArray=place.address_components,\r\n          city=this.getCity(addressArray),\r\n          area=this.getArea(addressArray),\r\n          state=this.getState(addressArray),\r\n          newLat=place.geometry.location.lat(),\r\n          newLng=place.geometry.location.lng();\r\n\r\n          this.setState({\r\n           address:(address) ? address :\"\",\r\n            area:(area) ? area :\"\",\r\n            city:(city) ? city :\"\",\r\n            state:(state) ? state :\"\",\r\n            mapPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            },\r\n            markerPosition:{\r\n              lat:newLat,\r\n              lng:newLng\r\n            }      \r\n          })\r\n  }\r\n\r\n  render(){\r\n\r\n\r\n\r\n\r\n \r\n \r\n\r\n  const MapWithAMarker = withScriptjs(withGoogleMap(props =>\r\n  <GoogleMap\r\n    defaultZoom={11}\r\n    defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n  >\r\n    <Marker\r\n      draggable={true}\r\n      onDragEnd={this.onMarkerDragEnd}\r\n      position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n    >\r\n<InfoWindow>\r\n  <p> Hello </p>\r\n\r\n</InfoWindow>\r\n\r\n\r\n    </Marker>\r\n\r\n    <AutoComplete\r\n    style={{width:\"100%\",height:'40px' ,paddingLeft:16,marginTop:2,marginBottom:'2rem'}}\r\n    types={ [\"(regions)\"]}\r\n     onPlaceSelected={this.onPlaceSelected}\r\n    />\r\n\r\n  </GoogleMap>\r\n));\r\n\r\n  return (\r\n    <div>\r\n\r\n <Descriptions title=\"User Info\" bordered>\r\n    <Descriptions.Item label=\"City\">{this.state.city}</Descriptions.Item>\r\n    <Descriptions.Item label=\"Area\">{this.state.area}</Descriptions.Item>\r\n    <Descriptions.Item label=\"State\">{this.state.state}</Descriptions.Item>\r\n    <Descriptions.Item label=\"Address\">{this.state.address}</Descriptions.Item>\r\n    \r\n   \r\n  </Descriptions>,\r\n\r\n  <MapWithAMarker\r\n  googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB6Up16Hpna6lEpVn0JQmkKI9ny0ulJNYg&v=3.exp&libraries=geometry,drawing,places\"\r\n  loadingElement={<div style={{ height: `100%` }} />}\r\n  containerElement={<div style={{ height: `400px` }} />}\r\n  mapElement={<div style={{ height: `100%` }} />}\r\n/>\r\n    </div>\r\n  \r\n  );\r\n}\r\n}\r\n\r\nexport default Map;*/}"]},"metadata":{},"sourceType":"module"}