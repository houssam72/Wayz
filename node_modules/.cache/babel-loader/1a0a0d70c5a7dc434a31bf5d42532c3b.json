{"ast":null,"code":"import React,{useRef}from\"react\";import{Canvas,extend,useThree,useFrame}from\"react-three-fiber\";import{CubeTextureLoader,CubeCamera,WebGLCubeRenderTarget,RGBFormat,LinearMipmapLinearFilter}from\"three\";import{OrbitControls}from\"three/examples/jsm/controls/OrbitControls\";import\"./Space.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";extend({OrbitControls:OrbitControls});var CameraControls=function CameraControls(){// Get a reference to the Three.js Camera, and the canvas html element.\n// We need these to setup the OrbitControls class.\n// https://threejs.org/docs/#examples/en/controls/OrbitControls\nvar _useThree=useThree(),camera=_useThree.camera,domElement=_useThree.gl.domElement;// Ref to the controls, so that we can update them on every frame using useFrame\nvar controls=useRef();useFrame(function(){return controls.current.update();});return/*#__PURE__*/_jsx(\"orbitControls\",{ref:controls,args:[camera,domElement],autoRotate:true,enableZoom:false});};// Loads the skybox texture and applies it to the scene.\nfunction SkyBox(){var _useThree2=useThree(),scene=_useThree2.scene;var loader=new CubeTextureLoader();// The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\nvar texture=loader.load([\"./side1.jpg\",\"./side2.jpg\",\"./side3.jpg\",\"./side4.jpg\",\"./side5.jpg\",\"./side6.jpg\"]);// Set the scene background property to the resulting texture.\nscene.background=texture;return null;}// Geometry\nfunction Sphere(){var _useThree3=useThree(),scene=_useThree3.scene,gl=_useThree3.gl;// The cubeRenderTarget is used to generate a texture for the reflective sphere.\n// It must be updated on each frame in order to track camera movement and other changes.\nvar cubeRenderTarget=new WebGLCubeRenderTarget(256,{format:RGBFormat,generateMipmaps:true,minFilter:LinearMipmapLinearFilter});var cubeCamera=new CubeCamera(1,1000,cubeRenderTarget);cubeCamera.position.set(0,0,0);scene.add(cubeCamera);// Update the cubeCamera with current renderer and scene.\nuseFrame(function(){return cubeCamera.update(gl,scene);});return/*#__PURE__*/_jsxs(\"mesh\",{visible:true,position:[0,0,0],rotation:[0,0,0],castShadow:true,children:[/*#__PURE__*/_jsx(\"directionalLight\",{intensity:0.5}),/*#__PURE__*/_jsx(\"sphereGeometry\",{attach:\"geometry\",args:[2,32,32]}),/*#__PURE__*/_jsx(\"meshBasicMaterial\",{attach:\"material\",envMap:cubeCamera.renderTarget.texture,color:\"white\",roughness:0.1,metalness:1})]});}// Lights\nfunction Space(){return/*#__PURE__*/_jsx(\"div\",{id:\"rot\",children:/*#__PURE__*/_jsxs(Canvas,{className:\"canvas\",children:[/*#__PURE__*/_jsx(CameraControls,{}),/*#__PURE__*/_jsx(Sphere,{}),/*#__PURE__*/_jsx(SkyBox,{})]})});}export default Space;","map":{"version":3,"sources":["C:/Users/mohcine/Desktop/project_pfe/wayz/src/Space/Space.js"],"names":["React","useRef","Canvas","extend","useThree","useFrame","CubeTextureLoader","CubeCamera","WebGLCubeRenderTarget","RGBFormat","LinearMipmapLinearFilter","OrbitControls","CameraControls","camera","domElement","gl","controls","current","update","SkyBox","scene","loader","texture","load","background","Sphere","cubeRenderTarget","format","generateMipmaps","minFilter","cubeCamera","position","set","add","renderTarget","Space"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { Canvas, extend, useThree, useFrame } from \"react-three-fiber\";\r\nimport {\r\n  CubeTextureLoader,\r\n  CubeCamera,\r\n  WebGLCubeRenderTarget,\r\n  RGBFormat,\r\n  LinearMipmapLinearFilter\r\n} from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport \"./Space.css\";\r\n\r\nextend({ OrbitControls });\r\n\r\nconst CameraControls = () => {\r\n  // Get a reference to the Three.js Camera, and the canvas html element.\r\n  // We need these to setup the OrbitControls class.\r\n  // https://threejs.org/docs/#examples/en/controls/OrbitControls\r\n\r\n  const {\r\n    camera,\r\n    gl: { domElement }\r\n  } = useThree();\r\n\r\n  // Ref to the controls, so that we can update them on every frame using useFrame\r\n  const controls = useRef();\r\n  useFrame(() => controls.current.update());\r\n  return (\r\n    <orbitControls\r\n      ref={controls}\r\n      args={[camera, domElement]}\r\n      autoRotate={true}\r\n      enableZoom={false}\r\n    />\r\n  );\r\n};\r\n\r\n// Loads the skybox texture and applies it to the scene.\r\nfunction SkyBox() {\r\n  const { scene } = useThree();\r\n  const loader = new CubeTextureLoader();\r\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\r\n  const texture = loader.load([\r\n  \"./side1.jpg\",\r\n    \"./side2.jpg\",\r\n    \"./side3.jpg\",\r\n    \"./side4.jpg\",\r\n    \"./side5.jpg\",\r\n    \"./side6.jpg\"\r\n  ]);\r\n\r\n  // Set the scene background property to the resulting texture.\r\n  scene.background = texture;\r\n  return null;\r\n}\r\n\r\n// Geometry\r\nfunction Sphere() {\r\n  const { scene, gl } = useThree();\r\n  // The cubeRenderTarget is used to generate a texture for the reflective sphere.\r\n  // It must be updated on each frame in order to track camera movement and other changes.\r\n  const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\r\n    format: RGBFormat,\r\n    generateMipmaps: true,\r\n    minFilter: LinearMipmapLinearFilter\r\n  });\r\n  const cubeCamera = new CubeCamera(1, 1000, cubeRenderTarget);\r\n  cubeCamera.position.set(0, 0, 0);\r\n  scene.add(cubeCamera);\r\n\r\n  // Update the cubeCamera with current renderer and scene.\r\n  useFrame(() => cubeCamera.update(gl, scene));\r\n\r\n  return (\r\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]} castShadow>\r\n      <directionalLight intensity={0.5} />\r\n      <sphereGeometry attach=\"geometry\" args={[2, 32, 32]} />\r\n      <meshBasicMaterial\r\n        attach=\"material\"\r\n        envMap={cubeCamera.renderTarget.texture}\r\n        color=\"white\"\r\n        roughness={0.1}\r\n        metalness={1}\r\n      />\r\n    </mesh>\r\n  );\r\n}\r\n\r\n// Lights\r\nfunction Space() {\r\n  return (\r\n    <div id='rot'>\r\n    <Canvas className=\"canvas\">\r\n      <CameraControls />\r\n      <Sphere />\r\n      <SkyBox />\r\n    </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Space;\r\n"]},"metadata":{},"sourceType":"module"}